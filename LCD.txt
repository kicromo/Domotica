;   BÁSICO PARA ECHAR A ANDAR EL LCD
;
;
;
;------------------------------------------------------------------------------------------------------------------------------------
; 1.3. CONSTANTES DEL LCD
;------------------------------------------------------------------------------------------------------------------------------------
SFF .equ 011h ; Set Frame Frequency
SMM .equ 01fh ; Set Multiplexing Mode
DISPLAYOFF .equ 008h ; Display OFF
DISPLAYON .equ 009h ; Display ON
BANCO1 .equ 0a7h ; Banco 1
BANCO2 .equ 0e7h ; Banco 2
SWM .equ 064h ; Set Write Mode
SCML .equ 071h ; Set Character Mode Left
SCMR .equ 072h ; Set Character Mode Right
TIPOCOMANDO .equ 00000001b ; Tipo Comando
TIPODATO .equ 00000000b ; Tipo Dato
LDPI .equ 10000000b ; LDPI
DOSPUNTOS .equ 00Ah ; posicion 10 en la tabla Datos_digito
CERO .equ 00110000b ; Codigo del 0
;------------------------------------------------------------------------------------------------------------------------------------
; 1.4. RESERVA DE MEMORIA PARA VARIABLES
;------------------------------------------------------------------------------------------------------------------------------------
VECES .equ 0600h ; Variable de GraficoLCD (1byte)
DATO .equ 0601h ; Variable de GraficoLCD (1byte)
MEMORIA .equ 0623h ; buffer de memoria del LCD (16 bytes)


;-----------------------------------------------------------------------------------------------
; CONEXIONES DEL LCD AL PUERTO 7 DEL MICROCONTROLADOR
;-----------------------------------------------------------------------------------------------
bset PD7_2 ; Chip Select (Nivel Bajo)
bset PD7_6 ; Command(Alto)/Data(Bajo)
bclr PD7_1 ; Busy (Bajo)
bset PD7_4 ; Reloj
bset PD7_3 ; Input

main:
;---------------------------------------------------------------------------------------------------------
; LLAMADA A LA SUBRUTINA Limpiar_Buffer PARA LIMPIAR EL BUFFER
;---------------------------------------------------------------------------------------------------------
jsr Limpiar_Buffer
;---------------------------------------------------------------------------------------------------------
; LLAMADA A LAS SUBRUTINAS DEL DISPLAY DEFINIDAS PARA LIMPIAR
; LA PANTALLA Y PONERLO EN MODO TEXTO PARA EL SALUDO
;---------------------------------------------------------------------------------------------------------
jsr Borrar_Grafico_LCD
jsr LCD_Modo_Texto
;---------------------------------------------------------------------------------------------------------
; LLAMADA A LA SUBRUTINA Saludo PARA SALUDAR AL USUARIO
;---------------------------------------------------------------------------------------------------------
jsr MensajeInicial
;------------------------------------------------------------------------------------------------------------------------------------
;------------------------------------------------------------------------------------------------------------------------------------
; 4. RUTINAS DE MANEJO DEL DISPLAY LCD
;------------------------------------------------------------------------------------------------------------------------------------
;------------------------------------------------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------------------------------
; RUTINA Limpiar_Buffer
;--------------------------------------------------------------------------------------------------------------------
; Limpia el contenido del buffer reservado para el Display LCD.
; Rellena todas las posiciones con el carácter espacio en blanco.
;--------------------------------------------------------------------------------------------------------------------
Limpiar_Buffer:
mov.w #0, a0 ;A0 = 0
bucleLimpiarMemoria:					;Poco eficiente pero mas clarito
	mov.b #00100000b, MEMORIA[a0] ; MEMORIA[A0] = ' '
	add.w #1, a0
	cmp.w #16, a0
	jnz bucleLimpiarMemoria
rts
;--------------------------------------------------------------------------------------------------------------------
; RUTINA Borrar_Grafico_LCD
;--------------------------------------------------------------------------------------------------------------------
; Borra el Display.
;--------------------------------------------------------------------------------------------------------------------
Borrar_Grafico_LCD:
	jsr LCDmodografico
	mov.b #TIPOCOMANDO, r0h
	mov.b #LDPI, r0l
	jsr EnviarByteLCD
	mov.w #000128, r0
	jsr GraficoLCD
rts

;--------------------------------------------------------------------------------------------------------------------
; RUTINA Texto_LCD
;--------------------------------------------------------------------------------------------------------------------
; Vuelca el contenido del buffer al display LCD.
; R0 L=Tipo, R0H=Dato.
;--------------------------------------------------------------------------------------------------------------------
Texto_LCD:
mov.b #TIPOCOMANDO, r0l ; R0L = 01 (COMANDO)
mov.b #BANCO1, r0h ; R0H = BANCO1
jsr EnviarByteLCD ; enviar comando al Display LCD
mov.w #0, a0
bucletext:
cmp.w #8, a0
jz BucleBanco2
mov.b MEMORIA[a0], r0h ; R0H = MEMORIA[A0]
mov.b #TIPODATO, r0l ; R0L = DATO
jsr EnviarByteLCD ; enviar dato al display LCD
add.w #1, a0
jmp bucletext

;--------------------------------------------------------------------------------------------------------------------
; RUTINA MeterByteMemoriaDerecha
;--------------------------------------------------------------------------------------------------------------------
; Mete un byte (r0l)en la zona de memoria del LCD por la derecha
; r0l = dato.
;--------------------------------------------------------------------------------------------------------------------
MeterByteMemoriaDerecha:
push.w a0
jsr DesplazarIzquierda
mov.w #15, a0
mov.b r0l, MEMORIA[a0]
pop.w a0
rts
;--------------------------------------------------------------------------------------------------------------------
; RUTINA DesplazarIzquierda
;--------------------------------------------------------------------------------------------------------------------
; Mueve la memoria una posición a la izquierda.
;--------------------------------------------------------------------------------------------------------------------
DesplazarIzquierda:
mov.w #0, a0
mov.w #1, a1
BucleDesplIzqda:
mov.b MEMORIA[a1], MEMORIA[a0]
add.w #1, a0
add.w #1, a1
cmp.w #15, a0
jnz BucleDesplIzqda
mov.b #20h, MEMORIA[a0]
rts
;--------------------------------------------------------------------------------------------------------------------
; RUTINA MeterByteMemoriaIzquierda
;--------------------------------------------------------------------------------------------------------------------
; Mete un byte (r0l)en la zona de memoria del LCD por la izquierda
; r0l = dato.
;--------------------------------------------------------------------------------------------------------------------
MeterByteMemoriaIzquierda:
push.w a0
jsr DesplazarDerecha
mov.w #0, a0
mov.b r0l, MEMORIA[a0]
pop.w a0
rts
;--------------------------------------------------------------------------------------------------------------------
; RUTINA DesplazarDerecha
;--------------------------------------------------------------------------------------------------------------------
; Mueve la memoria una posición a la izquierda.
;--------------------------------------------------------------------------------------------------------------------
DesplazarDerecha:
mov.w #15, a0
mov.w #14, a1
BucleDesplDerecha:
mov.b MEMORIA[a1], MEMORIA[a0]
sub.w #1, a0
sub.w #1, a1
cmp.w #0, a0
jnz BucleDesplDerecha
mov.b #20h, MEMORIA[a0]
rts
;--------------------------------------------------------------------------------------------------------------------
; RUTINA LCD_modo_texto
;--------------------------------------------------------------------------------------------------------------------
; Pone el LCD en modo texto.
;--------------------------------------------------------------------------------------------------------------------
LCD_Modo_Texto:
mov.b #1, r0l
mov.b #SFF, r0h
jsr EnviarByteLCD
mov.b #1, r0l
mov.b #SMM, r0h
jsr EnviarByteLCD
mov.b #1, r0l
mov.b #DISPLAYON, r0h
jsr EnviarByteLCD
mov.b #1, r0l
mov.b #SCML, r0h
jsr EnviarByteLCD
rts
;--------------------------------------------------------------------------------------------------------------------
; RUTINA EnviarByteLCD
;--------------------------------------------------------------------------------------------------------------------
; Envía un byte al display
; R0L = (Dato,0 | Comando,1)
; R0H = Byte
;--------------------------------------------------------------------------------------------------------------------
EnviarByteLCD:
	mov.b r0h, VARDISPLAY
	bclr P7_2
esperarespuesta:
	btst P7_1
	jz esperarespuesta
	cmp.b #000h, r0l
	jz esdato
	bset P7_6
	jmp listo
esdato:
	bclr P7_6
listo:
	mov.b #08, r1l
bucleLCD:
	cmp.b #000, r1l
	jz finiteracion
	sub.b #001, r1l
	mov.b VARDISPLAY, r0l
	btst 7, r0
	jz escero
;es uno
	bset P7_3
	jmp listobit
escero:
	bclr P7_3
	listobit:
;Simulamos un ciclo de reloj
	bclr P7_4
	rolc.w r0
	mov.b r0l, VARDISPLAY
	mov.w #1, r0
	jsr retardo
	bset P7_4
	mov.w #1, r0
	jsr retardo
	jmp bucleLCD
finiteracion:
	bset P7_2
esperarespuesta2:
	btst P7_1
	jz esperarespuesta2
rts
;--------------------------------------------------------------------------------------------------------------------
; RUTINA LCDmodografico
;--------------------------------------------------------------------------------------------------------------------
; Pone el LCD en modo gráfico
; R0L = TIPO
; R0H = BYTE
;--------------------------------------------------------------------------------------------------------------------
LCDmodografico:
	mov.b #SFF, r0h
	mov.b #1, r0l
	jsr EnviarByteLCD
	mov.b #SMM, r0h
	mov.b #1, r0l
	jsr EnviarByteLCD
	mov.b #DISPLAYON, r0h
	mov.b #1, r0l
	jsr EnviarByteLCD
	mov.b #SWM, r0h
	mov.b #1, r0l
	jsr EnviarByteLCD
rts
;--------------------------------------------------------------------------------------------------------------------
; RUTINA GraficoLCD
;--------------------------------------------------------------------------------------------------------------------
; Escribre R0L veces el dato R0H en el display.
; Empieza por el banco 1 y si quedan por escribir continua con el banco 2.
;--------------------------------------------------------------------------------------------------------------------
GraficoLCD:
	mov.b r0l, VECES
	mov.b r0h, DATO
mov.w #0, r3
mov.b #BANCO1, r0h
mov.b #1, r0l
jsr EnviarByteLCD
buclegrafico:
cmp.b #0, VECES
jz finbuclegrafico
mov.b DATO, r0h
mov.b #0, r0l
jsr EnviarByteLCD
cmp.w #63, r3
jnz continuar
mov.b #BANCO2, r0h
mov.b #01, r0l
jsr EnviarByteLCD
continuar:
	sub.b #1, VECES
	add.w #1, r3
jmp buclegrafico
finbuclegrafico:
rts

;--------------------------------------------------------------------------------------------------------------------
; SUBRUTINA MensajeInicial
;--------------------------------------------------------------------------------------------------------------------
; Imprime el mensaje de bienvenida
;--------------------------------------------------------------------------------------------------------------------
MensajeInicial:                                   ; Primero desplazamos el mensaje de derecha a izquierda
	mov.w #16, r1
	mov.w #0, a0
	mov.w r1, a1
?:
	cmp.w a0, a1
	jz ?+
	mov.w #0, r0
	lde.b MensajeInicial_data[a0], r0l
push.w a0
push.w a1
mov.w r0, a0
lde.b Alfabeto_data[a0], r0l
jsr MeterByteMemoriaDerecha
jsr Texto_LCD
pop.w a1
pop.w a0
add.w #1, a0
jmp ?-
?:
; Retardo de un cuarto de segundo
mov.w #250,r0
jsr retardo
; Después desplazamos el mensaje de izquierda a derecha 7 veces
;-----------------------------------------------------------------------------------
mov.w #5, r1
mov.w #0, a0
mov.w r1, a1
desp_der_izq:
cmp.w a0, a1
jz fin_desp_der
mov.w #0, r0
lde.b Espacios_data[a0], r0l
push.w a0
push.w a1
mov.w r0, a0
lde.b Alfabeto_data[a0], r0l
jsr MeterByteMemoriaIzquierda
jsr Texto_LCD
pop.w a1
pop.w a0
add.w #1, a0
jmp desp_der_izq
fin_desp_der:
; Retardo de un cuarto de segundo
mov.w #250,r0
jsr retardo
; Por último desplazamos el mensaje otra vez hasta centrarlo (4 veces)
;-----------------------------------------------------------------------------------------
mov.w #3, r1
mov.w #0, a0
mov.w r1, a1
hasta_centrarlo:
cmp.w a0, a1
jz fin_saludo
mov.w #0, r0
lde.b Espacios_data[a0], r0l
push.w a0
push.w a1
mov.w r0, a0
lde.b Alfabeto_data[a0], r0l
jsr MeterByteMemoriaDerecha
jsr Texto_LCD
pop.w a1
pop.w a0
add.w #1, a0
jmp hasta_centrarlo
fin_saludo:
jsr Limpiar_Buffer
rts
;------------------------------------------------------------------------------------------------------------------------------------
;------------------------------------------------------------------------------------------------------------------------------------
; 8. TABLAS DE DATOS
;------------------------------------------------------------------------------------------------------------------------------------
;------------------------------------------------------------------------------------------------------------------------------------
Digitos_data:
.byte 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h, 3ah
; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, :
Alfabeto_data:
.byte 41h, 42h, 43h, 44h, 45h, 46h, 47h, 48h, 49h, 4ah, 4bh, 4ch, 4dh, 4eh
; | | | | | | | | | | | | | |
; 0 1 2 3 4 5 6 7 8 9 10 11 12 13
; | | | | | | | | | | | | | |
; A B C D E F G H I J K L M N
.byte 4fh, 50h, 51h, 52h, 53h, 54h, 55h, 56h, 57h, 58h, 59h, 5ah, 20h, 3Fh
; | | | | | | | | | | | | | |
; 14 15 16 17 18 19 20 21 22 23 24 25 26 27
; | | | | | | | | | | | | | |
; O P Q R S T U V W X Y Z _ ?
MensajeAlarmaSonado_data:
.byte 26, 0, 11, 0, 7, 12, 0, 26, 18, 14, 13, 0, 13, 3, 14, 26
MensajeInicial_data:
.byte 17, 4, 11, 14, 9, 26, 0, 17, 4, 13, 0, 26, 26, 26, 26
Espacios_data:
.byte 26, 26, 26, 26, 26, 26, 26
MensajeMedioDia_data:
.byte 26, 26, 26, 26, 12, 4, 3, 8, 14, 3, 8, 0, 26, 26, 26, 26
MensajeMedioNoche_data:
.byte 26, 26, 26, 12, 4, 3, 8, 0, 13, 14, 2, 7, 4, 26, 26, 26
TeclaErronea_data:
.byte 19, 4, 2, 11, 0, 26, 4, 17, 17, 14, 13, 4, 0, 26

